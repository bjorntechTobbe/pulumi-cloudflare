// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare page rule resource.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/page_rule.html.markdown.
    /// </summary>
    public partial class PageRule : Pulumi.CustomResource
    {
        /// <summary>
        /// The actions taken by the page rule, options given below.
        /// </summary>
        [Output("actions")]
        public Output<Outputs.PageRuleActions> Actions { get; private set; } = null!;

        /// <summary>
        /// The priority of the page rule among others for this target, the higher the number the higher the priority as per [API documentation](https://api.cloudflare.com/#page-rules-for-a-zone-create-page-rule).
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Whether the page rule is active or disabled.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The URL pattern to target with the page rule.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;

        /// <summary>
        /// The DNS zone ID to which the page rule should be added.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a PageRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PageRule(string name, PageRuleArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/pageRule:PageRule", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private PageRule(string name, Input<string> id, PageRuleState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/pageRule:PageRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PageRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PageRule Get(string name, Input<string> id, PageRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new PageRule(name, id, state, options);
        }
    }

    public sealed class PageRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The actions taken by the page rule, options given below.
        /// </summary>
        [Input("actions", required: true)]
        public Input<Inputs.PageRuleActionsArgs> Actions { get; set; } = null!;

        /// <summary>
        /// The priority of the page rule among others for this target, the higher the number the higher the priority as per [API documentation](https://api.cloudflare.com/#page-rules-for-a-zone-create-page-rule).
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Whether the page rule is active or disabled.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The URL pattern to target with the page rule.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// The DNS zone ID to which the page rule should be added.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public PageRuleArgs()
        {
        }
    }

    public sealed class PageRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The actions taken by the page rule, options given below.
        /// </summary>
        [Input("actions")]
        public Input<Inputs.PageRuleActionsGetArgs>? Actions { get; set; }

        /// <summary>
        /// The priority of the page rule among others for this target, the higher the number the higher the priority as per [API documentation](https://api.cloudflare.com/#page-rules-for-a-zone-create-page-rule).
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Whether the page rule is active or disabled.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The URL pattern to target with the page rule.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// The DNS zone ID to which the page rule should be added.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public PageRuleState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class PageRuleActionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("alwaysOnline")]
        public Input<string>? AlwaysOnline { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("alwaysUseHttps")]
        public Input<bool>? AlwaysUseHttps { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("automaticHttpsRewrites")]
        public Input<string>? AutomaticHttpsRewrites { get; set; }

        /// <summary>
        /// The Time To Live for the browser cache. `0` means 'Respect Existing Headers'
        /// </summary>
        [Input("browserCacheTtl")]
        public Input<string>? BrowserCacheTtl { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("browserCheck")]
        public Input<string>? BrowserCheck { get; set; }

        /// <summary>
        /// String value of cookie name to conditionally bypass cache the page.
        /// </summary>
        [Input("bypassCacheOnCookie")]
        public Input<string>? BypassCacheOnCookie { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("cacheByDeviceType")]
        public Input<string>? CacheByDeviceType { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("cacheDeceptionArmor")]
        public Input<string>? CacheDeceptionArmor { get; set; }

        /// <summary>
        /// Whether to set the cache level to `"bypass"`, `"basic"`, `"simplified"`, `"aggressive"`, or `"cache_everything"`.
        /// </summary>
        [Input("cacheLevel")]
        public Input<string>? CacheLevel { get; set; }

        /// <summary>
        /// String value of cookie name to conditionally cache the page.
        /// </summary>
        [Input("cacheOnCookie")]
        public Input<string>? CacheOnCookie { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disableApps")]
        public Input<bool>? DisableApps { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disablePerformance")]
        public Input<bool>? DisablePerformance { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disableRailgun")]
        public Input<bool>? DisableRailgun { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disableSecurity")]
        public Input<bool>? DisableSecurity { get; set; }

        /// <summary>
        /// The Time To Live for the edge cache.
        /// </summary>
        [Input("edgeCacheTtl")]
        public Input<int>? EdgeCacheTtl { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("emailObfuscation")]
        public Input<string>? EmailObfuscation { get; set; }

        /// <summary>
        /// Whether origin Cache-Control action is `"on"` or `"off"`.
        /// </summary>
        [Input("explicitCacheControl")]
        public Input<string>? ExplicitCacheControl { get; set; }

        /// <summary>
        /// The URL to forward to, and with what status. See below.
        /// </summary>
        [Input("forwardingUrl")]
        public Input<PageRuleActionsForwardingUrlArgs>? ForwardingUrl { get; set; }

        /// <summary>
        /// Value of the Host header to send.
        /// </summary>
        [Input("hostHeaderOverride")]
        public Input<string>? HostHeaderOverride { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("ipGeolocation")]
        public Input<string>? IpGeolocation { get; set; }

        [Input("minifies")]
        private InputList<PageRuleActionsMinifiesArgs>? _minifies;

        /// <summary>
        /// The configuration for HTML, CSS and JS minification. See below for full list of options.
        /// </summary>
        public InputList<PageRuleActionsMinifiesArgs> Minifies
        {
            get => _minifies ?? (_minifies = new InputList<PageRuleActionsMinifiesArgs>());
            set => _minifies = value;
        }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("mirage")]
        public Input<string>? Mirage { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("opportunisticEncryption")]
        public Input<string>? OpportunisticEncryption { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("originErrorPagePassThru")]
        public Input<string>? OriginErrorPagePassThru { get; set; }

        /// <summary>
        /// Whether this action is `"off"`, `"lossless"` or `"lossy"`.
        /// </summary>
        [Input("polish")]
        public Input<string>? Polish { get; set; }

        /// <summary>
        /// Overridden origin server name.
        /// </summary>
        [Input("resolveOverride")]
        public Input<string>? ResolveOverride { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("respectStrongEtag")]
        public Input<string>? RespectStrongEtag { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("responseBuffering")]
        public Input<string>? ResponseBuffering { get; set; }

        /// <summary>
        /// Whether to set the rocket loader to `"on"`, `"off"`.
        /// </summary>
        [Input("rocketLoader")]
        public Input<string>? RocketLoader { get; set; }

        /// <summary>
        /// Whether to set the security level to `"off"`, `"essentially_off"`, `"low"`, `"medium"`, `"high"`, or `"under_attack"`.
        /// </summary>
        [Input("securityLevel")]
        public Input<string>? SecurityLevel { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("serverSideExclude")]
        public Input<string>? ServerSideExclude { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("sortQueryStringForCache")]
        public Input<string>? SortQueryStringForCache { get; set; }

        /// <summary>
        /// Whether to set the SSL mode to `"off"`, `"flexible"`, `"full"`, `"strict"`, or `"origin_pull"`.
        /// </summary>
        [Input("ssl")]
        public Input<string>? Ssl { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("trueClientIpHeader")]
        public Input<string>? TrueClientIpHeader { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("waf")]
        public Input<string>? Waf { get; set; }

        public PageRuleActionsArgs()
        {
        }
    }

    public sealed class PageRuleActionsForwardingUrlArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The status code to use for the redirection.
        /// </summary>
        [Input("statusCode", required: true)]
        public Input<int> StatusCode { get; set; } = null!;

        /// <summary>
        /// The URL to which the page rule should forward.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public PageRuleActionsForwardingUrlArgs()
        {
        }
    }

    public sealed class PageRuleActionsForwardingUrlGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The status code to use for the redirection.
        /// </summary>
        [Input("statusCode", required: true)]
        public Input<int> StatusCode { get; set; } = null!;

        /// <summary>
        /// The URL to which the page rule should forward.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public PageRuleActionsForwardingUrlGetArgs()
        {
        }
    }

    public sealed class PageRuleActionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("alwaysOnline")]
        public Input<string>? AlwaysOnline { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("alwaysUseHttps")]
        public Input<bool>? AlwaysUseHttps { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("automaticHttpsRewrites")]
        public Input<string>? AutomaticHttpsRewrites { get; set; }

        /// <summary>
        /// The Time To Live for the browser cache. `0` means 'Respect Existing Headers'
        /// </summary>
        [Input("browserCacheTtl")]
        public Input<string>? BrowserCacheTtl { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("browserCheck")]
        public Input<string>? BrowserCheck { get; set; }

        /// <summary>
        /// String value of cookie name to conditionally bypass cache the page.
        /// </summary>
        [Input("bypassCacheOnCookie")]
        public Input<string>? BypassCacheOnCookie { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("cacheByDeviceType")]
        public Input<string>? CacheByDeviceType { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("cacheDeceptionArmor")]
        public Input<string>? CacheDeceptionArmor { get; set; }

        /// <summary>
        /// Whether to set the cache level to `"bypass"`, `"basic"`, `"simplified"`, `"aggressive"`, or `"cache_everything"`.
        /// </summary>
        [Input("cacheLevel")]
        public Input<string>? CacheLevel { get; set; }

        /// <summary>
        /// String value of cookie name to conditionally cache the page.
        /// </summary>
        [Input("cacheOnCookie")]
        public Input<string>? CacheOnCookie { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disableApps")]
        public Input<bool>? DisableApps { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disablePerformance")]
        public Input<bool>? DisablePerformance { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disableRailgun")]
        public Input<bool>? DisableRailgun { get; set; }

        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        [Input("disableSecurity")]
        public Input<bool>? DisableSecurity { get; set; }

        /// <summary>
        /// The Time To Live for the edge cache.
        /// </summary>
        [Input("edgeCacheTtl")]
        public Input<int>? EdgeCacheTtl { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("emailObfuscation")]
        public Input<string>? EmailObfuscation { get; set; }

        /// <summary>
        /// Whether origin Cache-Control action is `"on"` or `"off"`.
        /// </summary>
        [Input("explicitCacheControl")]
        public Input<string>? ExplicitCacheControl { get; set; }

        /// <summary>
        /// The URL to forward to, and with what status. See below.
        /// </summary>
        [Input("forwardingUrl")]
        public Input<PageRuleActionsForwardingUrlGetArgs>? ForwardingUrl { get; set; }

        /// <summary>
        /// Value of the Host header to send.
        /// </summary>
        [Input("hostHeaderOverride")]
        public Input<string>? HostHeaderOverride { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("ipGeolocation")]
        public Input<string>? IpGeolocation { get; set; }

        [Input("minifies")]
        private InputList<PageRuleActionsMinifiesGetArgs>? _minifies;

        /// <summary>
        /// The configuration for HTML, CSS and JS minification. See below for full list of options.
        /// </summary>
        public InputList<PageRuleActionsMinifiesGetArgs> Minifies
        {
            get => _minifies ?? (_minifies = new InputList<PageRuleActionsMinifiesGetArgs>());
            set => _minifies = value;
        }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("mirage")]
        public Input<string>? Mirage { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("opportunisticEncryption")]
        public Input<string>? OpportunisticEncryption { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("originErrorPagePassThru")]
        public Input<string>? OriginErrorPagePassThru { get; set; }

        /// <summary>
        /// Whether this action is `"off"`, `"lossless"` or `"lossy"`.
        /// </summary>
        [Input("polish")]
        public Input<string>? Polish { get; set; }

        /// <summary>
        /// Overridden origin server name.
        /// </summary>
        [Input("resolveOverride")]
        public Input<string>? ResolveOverride { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("respectStrongEtag")]
        public Input<string>? RespectStrongEtag { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("responseBuffering")]
        public Input<string>? ResponseBuffering { get; set; }

        /// <summary>
        /// Whether to set the rocket loader to `"on"`, `"off"`.
        /// </summary>
        [Input("rocketLoader")]
        public Input<string>? RocketLoader { get; set; }

        /// <summary>
        /// Whether to set the security level to `"off"`, `"essentially_off"`, `"low"`, `"medium"`, `"high"`, or `"under_attack"`.
        /// </summary>
        [Input("securityLevel")]
        public Input<string>? SecurityLevel { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("serverSideExclude")]
        public Input<string>? ServerSideExclude { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("sortQueryStringForCache")]
        public Input<string>? SortQueryStringForCache { get; set; }

        /// <summary>
        /// Whether to set the SSL mode to `"off"`, `"flexible"`, `"full"`, `"strict"`, or `"origin_pull"`.
        /// </summary>
        [Input("ssl")]
        public Input<string>? Ssl { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("trueClientIpHeader")]
        public Input<string>? TrueClientIpHeader { get; set; }

        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        [Input("waf")]
        public Input<string>? Waf { get; set; }

        public PageRuleActionsGetArgs()
        {
        }
    }

    public sealed class PageRuleActionsMinifiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether CSS should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        [Input("css", required: true)]
        public Input<string> Css { get; set; } = null!;

        /// <summary>
        /// Whether HTML should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        [Input("html", required: true)]
        public Input<string> Html { get; set; } = null!;

        /// <summary>
        /// Whether Javascript should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        [Input("js", required: true)]
        public Input<string> Js { get; set; } = null!;

        public PageRuleActionsMinifiesArgs()
        {
        }
    }

    public sealed class PageRuleActionsMinifiesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether CSS should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        [Input("css", required: true)]
        public Input<string> Css { get; set; } = null!;

        /// <summary>
        /// Whether HTML should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        [Input("html", required: true)]
        public Input<string> Html { get; set; } = null!;

        /// <summary>
        /// Whether Javascript should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        [Input("js", required: true)]
        public Input<string> Js { get; set; } = null!;

        public PageRuleActionsMinifiesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class PageRuleActions
    {
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? AlwaysOnline;
        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        public readonly bool? AlwaysUseHttps;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? AutomaticHttpsRewrites;
        /// <summary>
        /// The Time To Live for the browser cache. `0` means 'Respect Existing Headers'
        /// </summary>
        public readonly string? BrowserCacheTtl;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? BrowserCheck;
        /// <summary>
        /// String value of cookie name to conditionally bypass cache the page.
        /// </summary>
        public readonly string? BypassCacheOnCookie;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? CacheByDeviceType;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? CacheDeceptionArmor;
        /// <summary>
        /// Whether to set the cache level to `"bypass"`, `"basic"`, `"simplified"`, `"aggressive"`, or `"cache_everything"`.
        /// </summary>
        public readonly string? CacheLevel;
        /// <summary>
        /// String value of cookie name to conditionally cache the page.
        /// </summary>
        public readonly string? CacheOnCookie;
        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        public readonly bool? DisableApps;
        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        public readonly bool? DisablePerformance;
        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        public readonly bool? DisableRailgun;
        /// <summary>
        /// Boolean of whether this action is enabled. Default: false.
        /// </summary>
        public readonly bool? DisableSecurity;
        /// <summary>
        /// The Time To Live for the edge cache.
        /// </summary>
        public readonly int? EdgeCacheTtl;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? EmailObfuscation;
        /// <summary>
        /// Whether origin Cache-Control action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? ExplicitCacheControl;
        /// <summary>
        /// The URL to forward to, and with what status. See below.
        /// </summary>
        public readonly PageRuleActionsForwardingUrl? ForwardingUrl;
        /// <summary>
        /// Value of the Host header to send.
        /// </summary>
        public readonly string? HostHeaderOverride;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? IpGeolocation;
        /// <summary>
        /// The configuration for HTML, CSS and JS minification. See below for full list of options.
        /// </summary>
        public readonly ImmutableArray<PageRuleActionsMinifies> Minifies;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? Mirage;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? OpportunisticEncryption;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? OriginErrorPagePassThru;
        /// <summary>
        /// Whether this action is `"off"`, `"lossless"` or `"lossy"`.
        /// </summary>
        public readonly string? Polish;
        /// <summary>
        /// Overridden origin server name.
        /// </summary>
        public readonly string? ResolveOverride;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? RespectStrongEtag;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? ResponseBuffering;
        /// <summary>
        /// Whether to set the rocket loader to `"on"`, `"off"`.
        /// </summary>
        public readonly string? RocketLoader;
        /// <summary>
        /// Whether to set the security level to `"off"`, `"essentially_off"`, `"low"`, `"medium"`, `"high"`, or `"under_attack"`.
        /// </summary>
        public readonly string? SecurityLevel;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? ServerSideExclude;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? SortQueryStringForCache;
        /// <summary>
        /// Whether to set the SSL mode to `"off"`, `"flexible"`, `"full"`, `"strict"`, or `"origin_pull"`.
        /// </summary>
        public readonly string? Ssl;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? TrueClientIpHeader;
        /// <summary>
        /// Whether this action is `"on"` or `"off"`.
        /// </summary>
        public readonly string? Waf;

        [OutputConstructor]
        private PageRuleActions(
            string? alwaysOnline,
            bool? alwaysUseHttps,
            string? automaticHttpsRewrites,
            string? browserCacheTtl,
            string? browserCheck,
            string? bypassCacheOnCookie,
            string? cacheByDeviceType,
            string? cacheDeceptionArmor,
            string? cacheLevel,
            string? cacheOnCookie,
            bool? disableApps,
            bool? disablePerformance,
            bool? disableRailgun,
            bool? disableSecurity,
            int? edgeCacheTtl,
            string? emailObfuscation,
            string? explicitCacheControl,
            PageRuleActionsForwardingUrl? forwardingUrl,
            string? hostHeaderOverride,
            string? ipGeolocation,
            ImmutableArray<PageRuleActionsMinifies> minifies,
            string? mirage,
            string? opportunisticEncryption,
            string? originErrorPagePassThru,
            string? polish,
            string? resolveOverride,
            string? respectStrongEtag,
            string? responseBuffering,
            string? rocketLoader,
            string? securityLevel,
            string? serverSideExclude,
            string? sortQueryStringForCache,
            string? ssl,
            string? trueClientIpHeader,
            string? waf)
        {
            AlwaysOnline = alwaysOnline;
            AlwaysUseHttps = alwaysUseHttps;
            AutomaticHttpsRewrites = automaticHttpsRewrites;
            BrowserCacheTtl = browserCacheTtl;
            BrowserCheck = browserCheck;
            BypassCacheOnCookie = bypassCacheOnCookie;
            CacheByDeviceType = cacheByDeviceType;
            CacheDeceptionArmor = cacheDeceptionArmor;
            CacheLevel = cacheLevel;
            CacheOnCookie = cacheOnCookie;
            DisableApps = disableApps;
            DisablePerformance = disablePerformance;
            DisableRailgun = disableRailgun;
            DisableSecurity = disableSecurity;
            EdgeCacheTtl = edgeCacheTtl;
            EmailObfuscation = emailObfuscation;
            ExplicitCacheControl = explicitCacheControl;
            ForwardingUrl = forwardingUrl;
            HostHeaderOverride = hostHeaderOverride;
            IpGeolocation = ipGeolocation;
            Minifies = minifies;
            Mirage = mirage;
            OpportunisticEncryption = opportunisticEncryption;
            OriginErrorPagePassThru = originErrorPagePassThru;
            Polish = polish;
            ResolveOverride = resolveOverride;
            RespectStrongEtag = respectStrongEtag;
            ResponseBuffering = responseBuffering;
            RocketLoader = rocketLoader;
            SecurityLevel = securityLevel;
            ServerSideExclude = serverSideExclude;
            SortQueryStringForCache = sortQueryStringForCache;
            Ssl = ssl;
            TrueClientIpHeader = trueClientIpHeader;
            Waf = waf;
        }
    }

    [OutputType]
    public sealed class PageRuleActionsForwardingUrl
    {
        /// <summary>
        /// The status code to use for the redirection.
        /// </summary>
        public readonly int StatusCode;
        /// <summary>
        /// The URL to which the page rule should forward.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private PageRuleActionsForwardingUrl(
            int statusCode,
            string url)
        {
            StatusCode = statusCode;
            Url = url;
        }
    }

    [OutputType]
    public sealed class PageRuleActionsMinifies
    {
        /// <summary>
        /// Whether CSS should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        public readonly string Css;
        /// <summary>
        /// Whether HTML should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        public readonly string Html;
        /// <summary>
        /// Whether Javascript should be minified. Valid values are `"on"` or `"off"`.
        /// </summary>
        public readonly string Js;

        [OutputConstructor]
        private PageRuleActionsMinifies(
            string css,
            string html,
            string js)
        {
            Css = css;
            Html = html;
            Js = js;
        }
    }
    }
}
