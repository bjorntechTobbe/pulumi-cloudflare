// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Access Identity Provider resource. Identity Providers are
    /// used as an authentication or authorisation source within Access.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/access_identity_provider.html.markdown.
    /// </summary>
    public partial class AccessIdentityProvider : Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Provider configuration from the [developer documentation][access_identity_provider_guide].
        /// </summary>
        [Output("configs")]
        public Output<ImmutableArray<Outputs.AccessIdentityProviderConfigs>> Configs { get; private set; } = null!;

        /// <summary>
        /// Friendly name of the Access Identity Provider configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The provider type to use. Must be one of: `"centrify"`,
        /// `"facebook"`, `"google-apps"`, `"oidc"`, `"github"`, `"google"`, `"saml"`,
        /// `"linkedin"`, `"azureAD"`, `"okta"`, `"onetimepin"`, `"onelogin"`, `"yandex"`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AccessIdentityProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessIdentityProvider(string name, AccessIdentityProviderArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessIdentityProvider:AccessIdentityProvider", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private AccessIdentityProvider(string name, Input<string> id, AccessIdentityProviderState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessIdentityProvider:AccessIdentityProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessIdentityProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessIdentityProvider Get(string name, Input<string> id, AccessIdentityProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessIdentityProvider(name, id, state, options);
        }
    }

    public sealed class AccessIdentityProviderArgs : Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("configs")]
        private InputList<Inputs.AccessIdentityProviderConfigsArgs>? _configs;

        /// <summary>
        /// Provider configuration from the [developer documentation][access_identity_provider_guide].
        /// </summary>
        public InputList<Inputs.AccessIdentityProviderConfigsArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.AccessIdentityProviderConfigsArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// Friendly name of the Access Identity Provider configuration.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The provider type to use. Must be one of: `"centrify"`,
        /// `"facebook"`, `"google-apps"`, `"oidc"`, `"github"`, `"google"`, `"saml"`,
        /// `"linkedin"`, `"azureAD"`, `"okta"`, `"onetimepin"`, `"onelogin"`, `"yandex"`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AccessIdentityProviderArgs()
        {
        }
    }

    public sealed class AccessIdentityProviderState : Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("configs")]
        private InputList<Inputs.AccessIdentityProviderConfigsGetArgs>? _configs;

        /// <summary>
        /// Provider configuration from the [developer documentation][access_identity_provider_guide].
        /// </summary>
        public InputList<Inputs.AccessIdentityProviderConfigsGetArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.AccessIdentityProviderConfigsGetArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// Friendly name of the Access Identity Provider configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The provider type to use. Must be one of: `"centrify"`,
        /// `"facebook"`, `"google-apps"`, `"oidc"`, `"github"`, `"google"`, `"saml"`,
        /// `"linkedin"`, `"azureAD"`, `"okta"`, `"onetimepin"`, `"onelogin"`, `"yandex"`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AccessIdentityProviderState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class AccessIdentityProviderConfigsArgs : Pulumi.ResourceArgs
    {
        [Input("appsDomain")]
        public Input<string>? AppsDomain { get; set; }

        [Input("attributes")]
        private InputList<string>? _attributes;
        public InputList<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<string>());
            set => _attributes = value;
        }

        [Input("authUrl")]
        public Input<string>? AuthUrl { get; set; }

        [Input("centrifyAccount")]
        public Input<string>? CentrifyAccount { get; set; }

        [Input("centrifyAppId")]
        public Input<string>? CentrifyAppId { get; set; }

        [Input("certsUrl")]
        public Input<string>? CertsUrl { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        [Input("emailAttributeName")]
        public Input<string>? EmailAttributeName { get; set; }

        [Input("idpPublicCert")]
        public Input<string>? IdpPublicCert { get; set; }

        [Input("issuerUrl")]
        public Input<string>? IssuerUrl { get; set; }

        [Input("oktaAccount")]
        public Input<string>? OktaAccount { get; set; }

        [Input("oneloginAccount")]
        public Input<string>? OneloginAccount { get; set; }

        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        [Input("signRequest")]
        public Input<bool>? SignRequest { get; set; }

        [Input("ssoTargetUrl")]
        public Input<string>? SsoTargetUrl { get; set; }

        [Input("supportGroups")]
        public Input<bool>? SupportGroups { get; set; }

        [Input("tokenUrl")]
        public Input<string>? TokenUrl { get; set; }

        public AccessIdentityProviderConfigsArgs()
        {
        }
    }

    public sealed class AccessIdentityProviderConfigsGetArgs : Pulumi.ResourceArgs
    {
        [Input("appsDomain")]
        public Input<string>? AppsDomain { get; set; }

        [Input("attributes")]
        private InputList<string>? _attributes;
        public InputList<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<string>());
            set => _attributes = value;
        }

        [Input("authUrl")]
        public Input<string>? AuthUrl { get; set; }

        [Input("centrifyAccount")]
        public Input<string>? CentrifyAccount { get; set; }

        [Input("centrifyAppId")]
        public Input<string>? CentrifyAppId { get; set; }

        [Input("certsUrl")]
        public Input<string>? CertsUrl { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        [Input("emailAttributeName")]
        public Input<string>? EmailAttributeName { get; set; }

        [Input("idpPublicCert")]
        public Input<string>? IdpPublicCert { get; set; }

        [Input("issuerUrl")]
        public Input<string>? IssuerUrl { get; set; }

        [Input("oktaAccount")]
        public Input<string>? OktaAccount { get; set; }

        [Input("oneloginAccount")]
        public Input<string>? OneloginAccount { get; set; }

        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        [Input("signRequest")]
        public Input<bool>? SignRequest { get; set; }

        [Input("ssoTargetUrl")]
        public Input<string>? SsoTargetUrl { get; set; }

        [Input("supportGroups")]
        public Input<bool>? SupportGroups { get; set; }

        [Input("tokenUrl")]
        public Input<string>? TokenUrl { get; set; }

        public AccessIdentityProviderConfigsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class AccessIdentityProviderConfigs
    {
        public readonly string? AppsDomain;
        public readonly ImmutableArray<string> Attributes;
        public readonly string? AuthUrl;
        public readonly string? CentrifyAccount;
        public readonly string? CentrifyAppId;
        public readonly string? CertsUrl;
        public readonly string? ClientId;
        public readonly string? ClientSecret;
        public readonly string? DirectoryId;
        public readonly string? EmailAttributeName;
        public readonly string? IdpPublicCert;
        public readonly string? IssuerUrl;
        public readonly string? OktaAccount;
        public readonly string? OneloginAccount;
        public readonly string RedirectUrl;
        public readonly bool? SignRequest;
        public readonly string? SsoTargetUrl;
        public readonly bool? SupportGroups;
        public readonly string? TokenUrl;

        [OutputConstructor]
        private AccessIdentityProviderConfigs(
            string? appsDomain,
            ImmutableArray<string> attributes,
            string? authUrl,
            string? centrifyAccount,
            string? centrifyAppId,
            string? certsUrl,
            string? clientId,
            string? clientSecret,
            string? directoryId,
            string? emailAttributeName,
            string? idpPublicCert,
            string? issuerUrl,
            string? oktaAccount,
            string? oneloginAccount,
            string redirectUrl,
            bool? signRequest,
            string? ssoTargetUrl,
            bool? supportGroups,
            string? tokenUrl)
        {
            AppsDomain = appsDomain;
            Attributes = attributes;
            AuthUrl = authUrl;
            CentrifyAccount = centrifyAccount;
            CentrifyAppId = centrifyAppId;
            CertsUrl = certsUrl;
            ClientId = clientId;
            ClientSecret = clientSecret;
            DirectoryId = directoryId;
            EmailAttributeName = emailAttributeName;
            IdpPublicCert = idpPublicCert;
            IssuerUrl = issuerUrl;
            OktaAccount = oktaAccount;
            OneloginAccount = oneloginAccount;
            RedirectUrl = redirectUrl;
            SignRequest = signRequest;
            SsoTargetUrl = ssoTargetUrl;
            SupportGroups = supportGroups;
            TokenUrl = tokenUrl;
        }
    }
    }
}
