// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class RulesetRuleActionParametersOverridesRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleActionParametersOverridesRuleArgs Empty = new RulesetRuleActionParametersOverridesRuleArgs();

    /**
     * Action to perform in the ruleset rule. Available values: `allow`, `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `set_config`, `serve_error`, `skip`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to perform in the ruleset rule. Available values: `allow`, `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `set_config`, `serve_error`, `skip`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Whether the rule is active.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the rule is active.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Unique rule identifier.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Unique rule identifier.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    @Import(name="scoreThreshold", required=true)
    private Output<Integer> scoreThreshold;

    public Output<Integer> scoreThreshold() {
        return this.scoreThreshold;
    }

    @Import(name="sensitivityLevel", required=true)
    private Output<String> sensitivityLevel;

    public Output<String> sensitivityLevel() {
        return this.sensitivityLevel;
    }

    private RulesetRuleActionParametersOverridesRuleArgs() {}

    private RulesetRuleActionParametersOverridesRuleArgs(RulesetRuleActionParametersOverridesRuleArgs $) {
        this.action = $.action;
        this.enabled = $.enabled;
        this.id = $.id;
        this.scoreThreshold = $.scoreThreshold;
        this.sensitivityLevel = $.sensitivityLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleActionParametersOverridesRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleActionParametersOverridesRuleArgs $;

        public Builder() {
            $ = new RulesetRuleActionParametersOverridesRuleArgs();
        }

        public Builder(RulesetRuleActionParametersOverridesRuleArgs defaults) {
            $ = new RulesetRuleActionParametersOverridesRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to perform in the ruleset rule. Available values: `allow`, `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `set_config`, `serve_error`, `skip`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to perform in the ruleset rule. Available values: `allow`, `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `set_config`, `serve_error`, `skip`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param enabled Whether the rule is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id Unique rule identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique rule identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder scoreThreshold(Output<Integer> scoreThreshold) {
            $.scoreThreshold = scoreThreshold;
            return this;
        }

        public Builder scoreThreshold(Integer scoreThreshold) {
            return scoreThreshold(Output.of(scoreThreshold));
        }

        public Builder sensitivityLevel(Output<String> sensitivityLevel) {
            $.sensitivityLevel = sensitivityLevel;
            return this;
        }

        public Builder sensitivityLevel(String sensitivityLevel) {
            return sensitivityLevel(Output.of(sensitivityLevel));
        }

        public RulesetRuleActionParametersOverridesRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.scoreThreshold = Objects.requireNonNull($.scoreThreshold, "expected parameter 'scoreThreshold' to be non-null");
            $.sensitivityLevel = Objects.requireNonNull($.sensitivityLevel, "expected parameter 'sensitivityLevel' to be non-null");
            return $;
        }
    }

}
