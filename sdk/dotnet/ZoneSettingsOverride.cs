// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource which customizes Cloudflare zone settings. Note that after destroying this resource Zone Settings will be reset to their initial values.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/zone_settings_override.html.markdown.
    /// </summary>
    public partial class ZoneSettingsOverride : Pulumi.CustomResource
    {
        /// <summary>
        /// Settings present in the zone at the time the resource is created. This will be used to restore the original settings when this resource is destroyed. Shares the same schema as the `settings` attribute (Above).
        /// </summary>
        [Output("initialSettings")]
        public Output<Outputs.ZoneSettingsOverrideInitialSettings> InitialSettings { get; private set; } = null!;

        [Output("initialSettingsReadAt")]
        public Output<string> InitialSettingsReadAt { get; private set; } = null!;

        /// <summary>
        /// Which of the current `settings` are not able to be set by the user. Which settings these are is determined by plan level and user permissions.
        /// * `zone_status`. A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup.
        /// * `zone_type`. Status of the zone. Valid values: active, pending, initializing, moved, deleted, deactivated.
        /// </summary>
        [Output("readonlySettings")]
        public Output<ImmutableArray<string>> ReadonlySettings { get; private set; } = null!;

        /// <summary>
        /// Settings overrides that will be applied to the zone. If a setting is not specified the existing setting will be used. For a full list of available settings see below.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.ZoneSettingsOverrideSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// The DNS zone ID to which apply settings.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        [Output("zoneStatus")]
        public Output<string> ZoneStatus { get; private set; } = null!;

        [Output("zoneType")]
        public Output<string> ZoneType { get; private set; } = null!;


        /// <summary>
        /// Create a ZoneSettingsOverride resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZoneSettingsOverride(string name, ZoneSettingsOverrideArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ZoneSettingsOverride(string name, Input<string> id, ZoneSettingsOverrideState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZoneSettingsOverride resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZoneSettingsOverride Get(string name, Input<string> id, ZoneSettingsOverrideState? state = null, CustomResourceOptions? options = null)
        {
            return new ZoneSettingsOverride(name, id, state, options);
        }
    }

    public sealed class ZoneSettingsOverrideArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings overrides that will be applied to the zone. If a setting is not specified the existing setting will be used. For a full list of available settings see below.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.ZoneSettingsOverrideSettingsArgs>? Settings { get; set; }

        /// <summary>
        /// The DNS zone ID to which apply settings.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ZoneSettingsOverrideArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Settings present in the zone at the time the resource is created. This will be used to restore the original settings when this resource is destroyed. Shares the same schema as the `settings` attribute (Above).
        /// </summary>
        [Input("initialSettings")]
        public Input<Inputs.ZoneSettingsOverrideInitialSettingsGetArgs>? InitialSettings { get; set; }

        [Input("initialSettingsReadAt")]
        public Input<string>? InitialSettingsReadAt { get; set; }

        [Input("readonlySettings")]
        private InputList<string>? _readonlySettings;

        /// <summary>
        /// Which of the current `settings` are not able to be set by the user. Which settings these are is determined by plan level and user permissions.
        /// * `zone_status`. A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup.
        /// * `zone_type`. Status of the zone. Valid values: active, pending, initializing, moved, deleted, deactivated.
        /// </summary>
        public InputList<string> ReadonlySettings
        {
            get => _readonlySettings ?? (_readonlySettings = new InputList<string>());
            set => _readonlySettings = value;
        }

        /// <summary>
        /// Settings overrides that will be applied to the zone. If a setting is not specified the existing setting will be used. For a full list of available settings see below.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.ZoneSettingsOverrideSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// The DNS zone ID to which apply settings.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        [Input("zoneStatus")]
        public Input<string>? ZoneStatus { get; set; }

        [Input("zoneType")]
        public Input<string>? ZoneType { get; set; }

        public ZoneSettingsOverrideState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ZoneSettingsOverrideInitialSettingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("alwaysOnline")]
        public Input<string>? AlwaysOnline { get; set; }

        [Input("alwaysUseHttps")]
        public Input<string>? AlwaysUseHttps { get; set; }

        [Input("automaticHttpsRewrites")]
        public Input<string>? AutomaticHttpsRewrites { get; set; }

        [Input("brotli")]
        public Input<string>? Brotli { get; set; }

        [Input("browserCacheTtl")]
        public Input<int>? BrowserCacheTtl { get; set; }

        [Input("browserCheck")]
        public Input<string>? BrowserCheck { get; set; }

        [Input("cacheLevel")]
        public Input<string>? CacheLevel { get; set; }

        [Input("challengeTtl")]
        public Input<int>? ChallengeTtl { get; set; }

        [Input("cnameFlattening")]
        public Input<string>? CnameFlattening { get; set; }

        [Input("developmentMode")]
        public Input<string>? DevelopmentMode { get; set; }

        [Input("edgeCacheTtl")]
        public Input<int>? EdgeCacheTtl { get; set; }

        [Input("emailObfuscation")]
        public Input<string>? EmailObfuscation { get; set; }

        [Input("h2Prioritization")]
        public Input<string>? H2Prioritization { get; set; }

        [Input("hotlinkProtection")]
        public Input<string>? HotlinkProtection { get; set; }

        [Input("http2")]
        public Input<string>? Http2 { get; set; }

        [Input("http3")]
        public Input<string>? Http3 { get; set; }

        [Input("imageResizing")]
        public Input<string>? ImageResizing { get; set; }

        [Input("ipGeolocation")]
        public Input<string>? IpGeolocation { get; set; }

        [Input("ipv6")]
        public Input<string>? Ipv6 { get; set; }

        [Input("maxUpload")]
        public Input<int>? MaxUpload { get; set; }

        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        [Input("minify")]
        public Input<ZoneSettingsOverrideInitialSettingsMinifyGetArgs>? Minify { get; set; }

        [Input("mirage")]
        public Input<string>? Mirage { get; set; }

        [Input("mobileRedirect")]
        public Input<ZoneSettingsOverrideInitialSettingsMobileRedirectGetArgs>? MobileRedirect { get; set; }

        [Input("opportunisticEncryption")]
        public Input<string>? OpportunisticEncryption { get; set; }

        [Input("opportunisticOnion")]
        public Input<string>? OpportunisticOnion { get; set; }

        [Input("originErrorPagePassThru")]
        public Input<string>? OriginErrorPagePassThru { get; set; }

        [Input("polish")]
        public Input<string>? Polish { get; set; }

        [Input("prefetchPreload")]
        public Input<string>? PrefetchPreload { get; set; }

        [Input("privacyPass")]
        public Input<string>? PrivacyPass { get; set; }

        [Input("pseudoIpv4")]
        public Input<string>? PseudoIpv4 { get; set; }

        [Input("responseBuffering")]
        public Input<string>? ResponseBuffering { get; set; }

        [Input("rocketLoader")]
        public Input<string>? RocketLoader { get; set; }

        [Input("securityHeader")]
        public Input<ZoneSettingsOverrideInitialSettingsSecurityHeaderGetArgs>? SecurityHeader { get; set; }

        [Input("securityLevel")]
        public Input<string>? SecurityLevel { get; set; }

        [Input("serverSideExclude")]
        public Input<string>? ServerSideExclude { get; set; }

        [Input("sortQueryStringForCache")]
        public Input<string>? SortQueryStringForCache { get; set; }

        [Input("ssl")]
        public Input<string>? Ssl { get; set; }

        [Input("tls12Only")]
        public Input<string>? Tls12Only { get; set; }

        [Input("tls13")]
        public Input<string>? Tls13 { get; set; }

        [Input("tlsClientAuth")]
        public Input<string>? TlsClientAuth { get; set; }

        [Input("trueClientIpHeader")]
        public Input<string>? TrueClientIpHeader { get; set; }

        [Input("waf")]
        public Input<string>? Waf { get; set; }

        [Input("webp")]
        public Input<string>? Webp { get; set; }

        [Input("websockets")]
        public Input<string>? Websockets { get; set; }

        [Input("zeroRtt")]
        public Input<string>? ZeroRtt { get; set; }

        public ZoneSettingsOverrideInitialSettingsGetArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideInitialSettingsMinifyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// "on"/"off"
        /// </summary>
        [Input("css", required: true)]
        public Input<string> Css { get; set; } = null!;

        /// <summary>
        /// "on"/"off"
        /// * `js` (Required)"on"/"off"
        /// </summary>
        [Input("html", required: true)]
        public Input<string> Html { get; set; } = null!;

        [Input("js", required: true)]
        public Input<string> Js { get; set; } = null!;

        public ZoneSettingsOverrideInitialSettingsMinifyGetArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideInitialSettingsMobileRedirectGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// String value
        /// </summary>
        [Input("mobileSubdomain", required: true)]
        public Input<string> MobileSubdomain { get; set; } = null!;

        /// <summary>
        /// "on"/"off"
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// true/false
        /// </summary>
        [Input("stripUri", required: true)]
        public Input<bool> StripUri { get; set; } = null!;

        public ZoneSettingsOverrideInitialSettingsMobileRedirectGetArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideInitialSettingsSecurityHeaderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// true/false
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("includeSubdomains")]
        public Input<bool>? IncludeSubdomains { get; set; }

        /// <summary>
        /// Integer
        /// </summary>
        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("nosniff")]
        public Input<bool>? Nosniff { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("preload")]
        public Input<bool>? Preload { get; set; }

        public ZoneSettingsOverrideInitialSettingsSecurityHeaderGetArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsArgs : Pulumi.ResourceArgs
    {
        [Input("alwaysOnline")]
        public Input<string>? AlwaysOnline { get; set; }

        [Input("alwaysUseHttps")]
        public Input<string>? AlwaysUseHttps { get; set; }

        [Input("automaticHttpsRewrites")]
        public Input<string>? AutomaticHttpsRewrites { get; set; }

        [Input("brotli")]
        public Input<string>? Brotli { get; set; }

        [Input("browserCacheTtl")]
        public Input<int>? BrowserCacheTtl { get; set; }

        [Input("browserCheck")]
        public Input<string>? BrowserCheck { get; set; }

        [Input("cacheLevel")]
        public Input<string>? CacheLevel { get; set; }

        [Input("challengeTtl")]
        public Input<int>? ChallengeTtl { get; set; }

        [Input("cnameFlattening")]
        public Input<string>? CnameFlattening { get; set; }

        [Input("developmentMode")]
        public Input<string>? DevelopmentMode { get; set; }

        [Input("edgeCacheTtl")]
        public Input<int>? EdgeCacheTtl { get; set; }

        [Input("emailObfuscation")]
        public Input<string>? EmailObfuscation { get; set; }

        [Input("h2Prioritization")]
        public Input<string>? H2Prioritization { get; set; }

        [Input("hotlinkProtection")]
        public Input<string>? HotlinkProtection { get; set; }

        [Input("http2")]
        public Input<string>? Http2 { get; set; }

        [Input("http3")]
        public Input<string>? Http3 { get; set; }

        [Input("imageResizing")]
        public Input<string>? ImageResizing { get; set; }

        [Input("ipGeolocation")]
        public Input<string>? IpGeolocation { get; set; }

        [Input("ipv6")]
        public Input<string>? Ipv6 { get; set; }

        [Input("maxUpload")]
        public Input<int>? MaxUpload { get; set; }

        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        [Input("minify")]
        public Input<ZoneSettingsOverrideSettingsMinifyArgs>? Minify { get; set; }

        [Input("mirage")]
        public Input<string>? Mirage { get; set; }

        [Input("mobileRedirect")]
        public Input<ZoneSettingsOverrideSettingsMobileRedirectArgs>? MobileRedirect { get; set; }

        [Input("opportunisticEncryption")]
        public Input<string>? OpportunisticEncryption { get; set; }

        [Input("opportunisticOnion")]
        public Input<string>? OpportunisticOnion { get; set; }

        [Input("originErrorPagePassThru")]
        public Input<string>? OriginErrorPagePassThru { get; set; }

        [Input("polish")]
        public Input<string>? Polish { get; set; }

        [Input("prefetchPreload")]
        public Input<string>? PrefetchPreload { get; set; }

        [Input("privacyPass")]
        public Input<string>? PrivacyPass { get; set; }

        [Input("pseudoIpv4")]
        public Input<string>? PseudoIpv4 { get; set; }

        [Input("responseBuffering")]
        public Input<string>? ResponseBuffering { get; set; }

        [Input("rocketLoader")]
        public Input<string>? RocketLoader { get; set; }

        [Input("securityHeader")]
        public Input<ZoneSettingsOverrideSettingsSecurityHeaderArgs>? SecurityHeader { get; set; }

        [Input("securityLevel")]
        public Input<string>? SecurityLevel { get; set; }

        [Input("serverSideExclude")]
        public Input<string>? ServerSideExclude { get; set; }

        [Input("sortQueryStringForCache")]
        public Input<string>? SortQueryStringForCache { get; set; }

        [Input("ssl")]
        public Input<string>? Ssl { get; set; }

        [Input("tls12Only")]
        public Input<string>? Tls12Only { get; set; }

        [Input("tls13")]
        public Input<string>? Tls13 { get; set; }

        [Input("tlsClientAuth")]
        public Input<string>? TlsClientAuth { get; set; }

        [Input("trueClientIpHeader")]
        public Input<string>? TrueClientIpHeader { get; set; }

        [Input("waf")]
        public Input<string>? Waf { get; set; }

        [Input("webp")]
        public Input<string>? Webp { get; set; }

        [Input("websockets")]
        public Input<string>? Websockets { get; set; }

        [Input("zeroRtt")]
        public Input<string>? ZeroRtt { get; set; }

        public ZoneSettingsOverrideSettingsArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("alwaysOnline")]
        public Input<string>? AlwaysOnline { get; set; }

        [Input("alwaysUseHttps")]
        public Input<string>? AlwaysUseHttps { get; set; }

        [Input("automaticHttpsRewrites")]
        public Input<string>? AutomaticHttpsRewrites { get; set; }

        [Input("brotli")]
        public Input<string>? Brotli { get; set; }

        [Input("browserCacheTtl")]
        public Input<int>? BrowserCacheTtl { get; set; }

        [Input("browserCheck")]
        public Input<string>? BrowserCheck { get; set; }

        [Input("cacheLevel")]
        public Input<string>? CacheLevel { get; set; }

        [Input("challengeTtl")]
        public Input<int>? ChallengeTtl { get; set; }

        [Input("cnameFlattening")]
        public Input<string>? CnameFlattening { get; set; }

        [Input("developmentMode")]
        public Input<string>? DevelopmentMode { get; set; }

        [Input("edgeCacheTtl")]
        public Input<int>? EdgeCacheTtl { get; set; }

        [Input("emailObfuscation")]
        public Input<string>? EmailObfuscation { get; set; }

        [Input("h2Prioritization")]
        public Input<string>? H2Prioritization { get; set; }

        [Input("hotlinkProtection")]
        public Input<string>? HotlinkProtection { get; set; }

        [Input("http2")]
        public Input<string>? Http2 { get; set; }

        [Input("http3")]
        public Input<string>? Http3 { get; set; }

        [Input("imageResizing")]
        public Input<string>? ImageResizing { get; set; }

        [Input("ipGeolocation")]
        public Input<string>? IpGeolocation { get; set; }

        [Input("ipv6")]
        public Input<string>? Ipv6 { get; set; }

        [Input("maxUpload")]
        public Input<int>? MaxUpload { get; set; }

        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        [Input("minify")]
        public Input<ZoneSettingsOverrideSettingsMinifyGetArgs>? Minify { get; set; }

        [Input("mirage")]
        public Input<string>? Mirage { get; set; }

        [Input("mobileRedirect")]
        public Input<ZoneSettingsOverrideSettingsMobileRedirectGetArgs>? MobileRedirect { get; set; }

        [Input("opportunisticEncryption")]
        public Input<string>? OpportunisticEncryption { get; set; }

        [Input("opportunisticOnion")]
        public Input<string>? OpportunisticOnion { get; set; }

        [Input("originErrorPagePassThru")]
        public Input<string>? OriginErrorPagePassThru { get; set; }

        [Input("polish")]
        public Input<string>? Polish { get; set; }

        [Input("prefetchPreload")]
        public Input<string>? PrefetchPreload { get; set; }

        [Input("privacyPass")]
        public Input<string>? PrivacyPass { get; set; }

        [Input("pseudoIpv4")]
        public Input<string>? PseudoIpv4 { get; set; }

        [Input("responseBuffering")]
        public Input<string>? ResponseBuffering { get; set; }

        [Input("rocketLoader")]
        public Input<string>? RocketLoader { get; set; }

        [Input("securityHeader")]
        public Input<ZoneSettingsOverrideSettingsSecurityHeaderGetArgs>? SecurityHeader { get; set; }

        [Input("securityLevel")]
        public Input<string>? SecurityLevel { get; set; }

        [Input("serverSideExclude")]
        public Input<string>? ServerSideExclude { get; set; }

        [Input("sortQueryStringForCache")]
        public Input<string>? SortQueryStringForCache { get; set; }

        [Input("ssl")]
        public Input<string>? Ssl { get; set; }

        [Input("tls12Only")]
        public Input<string>? Tls12Only { get; set; }

        [Input("tls13")]
        public Input<string>? Tls13 { get; set; }

        [Input("tlsClientAuth")]
        public Input<string>? TlsClientAuth { get; set; }

        [Input("trueClientIpHeader")]
        public Input<string>? TrueClientIpHeader { get; set; }

        [Input("waf")]
        public Input<string>? Waf { get; set; }

        [Input("webp")]
        public Input<string>? Webp { get; set; }

        [Input("websockets")]
        public Input<string>? Websockets { get; set; }

        [Input("zeroRtt")]
        public Input<string>? ZeroRtt { get; set; }

        public ZoneSettingsOverrideSettingsGetArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsMinifyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// "on"/"off"
        /// </summary>
        [Input("css", required: true)]
        public Input<string> Css { get; set; } = null!;

        /// <summary>
        /// "on"/"off"
        /// * `js` (Required)"on"/"off"
        /// </summary>
        [Input("html", required: true)]
        public Input<string> Html { get; set; } = null!;

        [Input("js", required: true)]
        public Input<string> Js { get; set; } = null!;

        public ZoneSettingsOverrideSettingsMinifyArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsMinifyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// "on"/"off"
        /// </summary>
        [Input("css", required: true)]
        public Input<string> Css { get; set; } = null!;

        /// <summary>
        /// "on"/"off"
        /// * `js` (Required)"on"/"off"
        /// </summary>
        [Input("html", required: true)]
        public Input<string> Html { get; set; } = null!;

        [Input("js", required: true)]
        public Input<string> Js { get; set; } = null!;

        public ZoneSettingsOverrideSettingsMinifyGetArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsMobileRedirectArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// String value
        /// </summary>
        [Input("mobileSubdomain", required: true)]
        public Input<string> MobileSubdomain { get; set; } = null!;

        /// <summary>
        /// "on"/"off"
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// true/false
        /// </summary>
        [Input("stripUri", required: true)]
        public Input<bool> StripUri { get; set; } = null!;

        public ZoneSettingsOverrideSettingsMobileRedirectArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsMobileRedirectGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// String value
        /// </summary>
        [Input("mobileSubdomain", required: true)]
        public Input<string> MobileSubdomain { get; set; } = null!;

        /// <summary>
        /// "on"/"off"
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// true/false
        /// </summary>
        [Input("stripUri", required: true)]
        public Input<bool> StripUri { get; set; } = null!;

        public ZoneSettingsOverrideSettingsMobileRedirectGetArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsSecurityHeaderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// true/false
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("includeSubdomains")]
        public Input<bool>? IncludeSubdomains { get; set; }

        /// <summary>
        /// Integer
        /// </summary>
        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("nosniff")]
        public Input<bool>? Nosniff { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("preload")]
        public Input<bool>? Preload { get; set; }

        public ZoneSettingsOverrideSettingsSecurityHeaderArgs()
        {
        }
    }

    public sealed class ZoneSettingsOverrideSettingsSecurityHeaderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// true/false
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("includeSubdomains")]
        public Input<bool>? IncludeSubdomains { get; set; }

        /// <summary>
        /// Integer
        /// </summary>
        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("nosniff")]
        public Input<bool>? Nosniff { get; set; }

        /// <summary>
        /// true/false
        /// </summary>
        [Input("preload")]
        public Input<bool>? Preload { get; set; }

        public ZoneSettingsOverrideSettingsSecurityHeaderGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ZoneSettingsOverrideInitialSettings
    {
        public readonly string AlwaysOnline;
        public readonly string AlwaysUseHttps;
        public readonly string AutomaticHttpsRewrites;
        public readonly string Brotli;
        public readonly int BrowserCacheTtl;
        public readonly string BrowserCheck;
        public readonly string CacheLevel;
        public readonly int ChallengeTtl;
        public readonly string CnameFlattening;
        public readonly string DevelopmentMode;
        public readonly int EdgeCacheTtl;
        public readonly string EmailObfuscation;
        public readonly string H2Prioritization;
        public readonly string HotlinkProtection;
        public readonly string Http2;
        public readonly string Http3;
        public readonly string ImageResizing;
        public readonly string IpGeolocation;
        public readonly string Ipv6;
        public readonly int MaxUpload;
        public readonly string MinTlsVersion;
        public readonly ZoneSettingsOverrideInitialSettingsMinify Minify;
        public readonly string Mirage;
        public readonly ZoneSettingsOverrideInitialSettingsMobileRedirect MobileRedirect;
        public readonly string OpportunisticEncryption;
        public readonly string OpportunisticOnion;
        public readonly string OriginErrorPagePassThru;
        public readonly string Polish;
        public readonly string PrefetchPreload;
        public readonly string PrivacyPass;
        public readonly string PseudoIpv4;
        public readonly string ResponseBuffering;
        public readonly string RocketLoader;
        public readonly ZoneSettingsOverrideInitialSettingsSecurityHeader SecurityHeader;
        public readonly string SecurityLevel;
        public readonly string ServerSideExclude;
        public readonly string SortQueryStringForCache;
        public readonly string Ssl;
        public readonly string Tls12Only;
        public readonly string Tls13;
        public readonly string TlsClientAuth;
        public readonly string TrueClientIpHeader;
        public readonly string Waf;
        public readonly string Webp;
        public readonly string Websockets;
        public readonly string ZeroRtt;

        [OutputConstructor]
        private ZoneSettingsOverrideInitialSettings(
            string alwaysOnline,
            string alwaysUseHttps,
            string automaticHttpsRewrites,
            string brotli,
            int browserCacheTtl,
            string browserCheck,
            string cacheLevel,
            int challengeTtl,
            string cnameFlattening,
            string developmentMode,
            int edgeCacheTtl,
            string emailObfuscation,
            string h2Prioritization,
            string hotlinkProtection,
            string http2,
            string http3,
            string imageResizing,
            string ipGeolocation,
            string ipv6,
            int maxUpload,
            string minTlsVersion,
            ZoneSettingsOverrideInitialSettingsMinify minify,
            string mirage,
            ZoneSettingsOverrideInitialSettingsMobileRedirect mobileRedirect,
            string opportunisticEncryption,
            string opportunisticOnion,
            string originErrorPagePassThru,
            string polish,
            string prefetchPreload,
            string privacyPass,
            string pseudoIpv4,
            string responseBuffering,
            string rocketLoader,
            ZoneSettingsOverrideInitialSettingsSecurityHeader securityHeader,
            string securityLevel,
            string serverSideExclude,
            string sortQueryStringForCache,
            string ssl,
            string tls12Only,
            string tls13,
            string tlsClientAuth,
            string trueClientIpHeader,
            string waf,
            string webp,
            string websockets,
            string zeroRtt)
        {
            AlwaysOnline = alwaysOnline;
            AlwaysUseHttps = alwaysUseHttps;
            AutomaticHttpsRewrites = automaticHttpsRewrites;
            Brotli = brotli;
            BrowserCacheTtl = browserCacheTtl;
            BrowserCheck = browserCheck;
            CacheLevel = cacheLevel;
            ChallengeTtl = challengeTtl;
            CnameFlattening = cnameFlattening;
            DevelopmentMode = developmentMode;
            EdgeCacheTtl = edgeCacheTtl;
            EmailObfuscation = emailObfuscation;
            H2Prioritization = h2Prioritization;
            HotlinkProtection = hotlinkProtection;
            Http2 = http2;
            Http3 = http3;
            ImageResizing = imageResizing;
            IpGeolocation = ipGeolocation;
            Ipv6 = ipv6;
            MaxUpload = maxUpload;
            MinTlsVersion = minTlsVersion;
            Minify = minify;
            Mirage = mirage;
            MobileRedirect = mobileRedirect;
            OpportunisticEncryption = opportunisticEncryption;
            OpportunisticOnion = opportunisticOnion;
            OriginErrorPagePassThru = originErrorPagePassThru;
            Polish = polish;
            PrefetchPreload = prefetchPreload;
            PrivacyPass = privacyPass;
            PseudoIpv4 = pseudoIpv4;
            ResponseBuffering = responseBuffering;
            RocketLoader = rocketLoader;
            SecurityHeader = securityHeader;
            SecurityLevel = securityLevel;
            ServerSideExclude = serverSideExclude;
            SortQueryStringForCache = sortQueryStringForCache;
            Ssl = ssl;
            Tls12Only = tls12Only;
            Tls13 = tls13;
            TlsClientAuth = tlsClientAuth;
            TrueClientIpHeader = trueClientIpHeader;
            Waf = waf;
            Webp = webp;
            Websockets = websockets;
            ZeroRtt = zeroRtt;
        }
    }

    [OutputType]
    public sealed class ZoneSettingsOverrideInitialSettingsMinify
    {
        /// <summary>
        /// "on"/"off"
        /// </summary>
        public readonly string Css;
        /// <summary>
        /// "on"/"off"
        /// * `js` (Required)"on"/"off"
        /// </summary>
        public readonly string Html;
        public readonly string Js;

        [OutputConstructor]
        private ZoneSettingsOverrideInitialSettingsMinify(
            string css,
            string html,
            string js)
        {
            Css = css;
            Html = html;
            Js = js;
        }
    }

    [OutputType]
    public sealed class ZoneSettingsOverrideInitialSettingsMobileRedirect
    {
        /// <summary>
        /// String value
        /// </summary>
        public readonly string MobileSubdomain;
        /// <summary>
        /// "on"/"off"
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool StripUri;

        [OutputConstructor]
        private ZoneSettingsOverrideInitialSettingsMobileRedirect(
            string mobileSubdomain,
            string status,
            bool stripUri)
        {
            MobileSubdomain = mobileSubdomain;
            Status = status;
            StripUri = stripUri;
        }
    }

    [OutputType]
    public sealed class ZoneSettingsOverrideInitialSettingsSecurityHeader
    {
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool IncludeSubdomains;
        /// <summary>
        /// Integer
        /// </summary>
        public readonly int MaxAge;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool Nosniff;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool Preload;

        [OutputConstructor]
        private ZoneSettingsOverrideInitialSettingsSecurityHeader(
            bool enabled,
            bool includeSubdomains,
            int maxAge,
            bool nosniff,
            bool preload)
        {
            Enabled = enabled;
            IncludeSubdomains = includeSubdomains;
            MaxAge = maxAge;
            Nosniff = nosniff;
            Preload = preload;
        }
    }

    [OutputType]
    public sealed class ZoneSettingsOverrideSettings
    {
        public readonly string AlwaysOnline;
        public readonly string AlwaysUseHttps;
        public readonly string AutomaticHttpsRewrites;
        public readonly string Brotli;
        public readonly int BrowserCacheTtl;
        public readonly string BrowserCheck;
        public readonly string CacheLevel;
        public readonly int ChallengeTtl;
        public readonly string CnameFlattening;
        public readonly string DevelopmentMode;
        public readonly int EdgeCacheTtl;
        public readonly string EmailObfuscation;
        public readonly string H2Prioritization;
        public readonly string HotlinkProtection;
        public readonly string Http2;
        public readonly string Http3;
        public readonly string ImageResizing;
        public readonly string IpGeolocation;
        public readonly string Ipv6;
        public readonly int MaxUpload;
        public readonly string MinTlsVersion;
        public readonly ZoneSettingsOverrideSettingsMinify Minify;
        public readonly string Mirage;
        public readonly ZoneSettingsOverrideSettingsMobileRedirect MobileRedirect;
        public readonly string OpportunisticEncryption;
        public readonly string OpportunisticOnion;
        public readonly string OriginErrorPagePassThru;
        public readonly string Polish;
        public readonly string PrefetchPreload;
        public readonly string PrivacyPass;
        public readonly string PseudoIpv4;
        public readonly string ResponseBuffering;
        public readonly string RocketLoader;
        public readonly ZoneSettingsOverrideSettingsSecurityHeader SecurityHeader;
        public readonly string SecurityLevel;
        public readonly string ServerSideExclude;
        public readonly string SortQueryStringForCache;
        public readonly string Ssl;
        public readonly string Tls12Only;
        public readonly string Tls13;
        public readonly string TlsClientAuth;
        public readonly string TrueClientIpHeader;
        public readonly string Waf;
        public readonly string Webp;
        public readonly string Websockets;
        public readonly string ZeroRtt;

        [OutputConstructor]
        private ZoneSettingsOverrideSettings(
            string alwaysOnline,
            string alwaysUseHttps,
            string automaticHttpsRewrites,
            string brotli,
            int browserCacheTtl,
            string browserCheck,
            string cacheLevel,
            int challengeTtl,
            string cnameFlattening,
            string developmentMode,
            int edgeCacheTtl,
            string emailObfuscation,
            string h2Prioritization,
            string hotlinkProtection,
            string http2,
            string http3,
            string imageResizing,
            string ipGeolocation,
            string ipv6,
            int maxUpload,
            string minTlsVersion,
            ZoneSettingsOverrideSettingsMinify minify,
            string mirage,
            ZoneSettingsOverrideSettingsMobileRedirect mobileRedirect,
            string opportunisticEncryption,
            string opportunisticOnion,
            string originErrorPagePassThru,
            string polish,
            string prefetchPreload,
            string privacyPass,
            string pseudoIpv4,
            string responseBuffering,
            string rocketLoader,
            ZoneSettingsOverrideSettingsSecurityHeader securityHeader,
            string securityLevel,
            string serverSideExclude,
            string sortQueryStringForCache,
            string ssl,
            string tls12Only,
            string tls13,
            string tlsClientAuth,
            string trueClientIpHeader,
            string waf,
            string webp,
            string websockets,
            string zeroRtt)
        {
            AlwaysOnline = alwaysOnline;
            AlwaysUseHttps = alwaysUseHttps;
            AutomaticHttpsRewrites = automaticHttpsRewrites;
            Brotli = brotli;
            BrowserCacheTtl = browserCacheTtl;
            BrowserCheck = browserCheck;
            CacheLevel = cacheLevel;
            ChallengeTtl = challengeTtl;
            CnameFlattening = cnameFlattening;
            DevelopmentMode = developmentMode;
            EdgeCacheTtl = edgeCacheTtl;
            EmailObfuscation = emailObfuscation;
            H2Prioritization = h2Prioritization;
            HotlinkProtection = hotlinkProtection;
            Http2 = http2;
            Http3 = http3;
            ImageResizing = imageResizing;
            IpGeolocation = ipGeolocation;
            Ipv6 = ipv6;
            MaxUpload = maxUpload;
            MinTlsVersion = minTlsVersion;
            Minify = minify;
            Mirage = mirage;
            MobileRedirect = mobileRedirect;
            OpportunisticEncryption = opportunisticEncryption;
            OpportunisticOnion = opportunisticOnion;
            OriginErrorPagePassThru = originErrorPagePassThru;
            Polish = polish;
            PrefetchPreload = prefetchPreload;
            PrivacyPass = privacyPass;
            PseudoIpv4 = pseudoIpv4;
            ResponseBuffering = responseBuffering;
            RocketLoader = rocketLoader;
            SecurityHeader = securityHeader;
            SecurityLevel = securityLevel;
            ServerSideExclude = serverSideExclude;
            SortQueryStringForCache = sortQueryStringForCache;
            Ssl = ssl;
            Tls12Only = tls12Only;
            Tls13 = tls13;
            TlsClientAuth = tlsClientAuth;
            TrueClientIpHeader = trueClientIpHeader;
            Waf = waf;
            Webp = webp;
            Websockets = websockets;
            ZeroRtt = zeroRtt;
        }
    }

    [OutputType]
    public sealed class ZoneSettingsOverrideSettingsMinify
    {
        /// <summary>
        /// "on"/"off"
        /// </summary>
        public readonly string Css;
        /// <summary>
        /// "on"/"off"
        /// * `js` (Required)"on"/"off"
        /// </summary>
        public readonly string Html;
        public readonly string Js;

        [OutputConstructor]
        private ZoneSettingsOverrideSettingsMinify(
            string css,
            string html,
            string js)
        {
            Css = css;
            Html = html;
            Js = js;
        }
    }

    [OutputType]
    public sealed class ZoneSettingsOverrideSettingsMobileRedirect
    {
        /// <summary>
        /// String value
        /// </summary>
        public readonly string MobileSubdomain;
        /// <summary>
        /// "on"/"off"
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool StripUri;

        [OutputConstructor]
        private ZoneSettingsOverrideSettingsMobileRedirect(
            string mobileSubdomain,
            string status,
            bool stripUri)
        {
            MobileSubdomain = mobileSubdomain;
            Status = status;
            StripUri = stripUri;
        }
    }

    [OutputType]
    public sealed class ZoneSettingsOverrideSettingsSecurityHeader
    {
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool IncludeSubdomains;
        /// <summary>
        /// Integer
        /// </summary>
        public readonly int MaxAge;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool Nosniff;
        /// <summary>
        /// true/false
        /// </summary>
        public readonly bool Preload;

        [OutputConstructor]
        private ZoneSettingsOverrideSettingsSecurityHeader(
            bool enabled,
            bool includeSubdomains,
            int maxAge,
            bool nosniff,
            bool preload)
        {
            Enabled = enabled;
            IncludeSubdomains = includeSubdomains;
            MaxAge = maxAge;
            Nosniff = nosniff;
            Preload = preload;
        }
    }
    }
}
