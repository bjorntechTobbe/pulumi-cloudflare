// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare rate limit resource for a given zone. This can be used to limit the traffic you receive zone-wide, or matching more specific types of requests/responses.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-cloudflare/blob/master/website/docs/r/rate_limit.html.markdown.
    /// </summary>
    public partial class RateLimit : Pulumi.CustomResource
    {
        /// <summary>
        /// The action to be performed when the threshold of matched traffic within the period defined is exceeded.
        /// </summary>
        [Output("action")]
        public Output<Outputs.RateLimitAction> Action { get; private set; } = null!;

        /// <summary>
        /// URLs matching the patterns specified here will be excluded from rate limiting.
        /// </summary>
        [Output("bypassUrlPatterns")]
        public Output<ImmutableArray<string>> BypassUrlPatterns { get; private set; } = null!;

        /// <summary>
        /// Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
        /// </summary>
        [Output("correlate")]
        public Output<Outputs.RateLimitCorrelate?> Correlate { get; private set; } = null!;

        /// <summary>
        /// A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether this ratelimit is currently disabled. Default: `false`.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone. See definition below.
        /// </summary>
        [Output("match")]
        public Output<Outputs.RateLimitMatch> Match { get; private set; } = null!;

        /// <summary>
        /// The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed (min: 1, max: 86,400).
        /// </summary>
        [Output("period")]
        public Output<int> Period { get; private set; } = null!;

        /// <summary>
        /// The threshold that triggers the rate limit mitigations, combine with period. i.e. threshold per period (min: 2, max: 1,000,000).
        /// </summary>
        [Output("threshold")]
        public Output<int> Threshold { get; private set; } = null!;

        /// <summary>
        /// The DNS zone ID to apply rate limiting to.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a RateLimit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RateLimit(string name, RateLimitArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/rateLimit:RateLimit", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private RateLimit(string name, Input<string> id, RateLimitState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/rateLimit:RateLimit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RateLimit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RateLimit Get(string name, Input<string> id, RateLimitState? state = null, CustomResourceOptions? options = null)
        {
            return new RateLimit(name, id, state, options);
        }
    }

    public sealed class RateLimitArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to be performed when the threshold of matched traffic within the period defined is exceeded.
        /// </summary>
        [Input("action", required: true)]
        public Input<Inputs.RateLimitActionArgs> Action { get; set; } = null!;

        [Input("bypassUrlPatterns")]
        private InputList<string>? _bypassUrlPatterns;

        /// <summary>
        /// URLs matching the patterns specified here will be excluded from rate limiting.
        /// </summary>
        public InputList<string> BypassUrlPatterns
        {
            get => _bypassUrlPatterns ?? (_bypassUrlPatterns = new InputList<string>());
            set => _bypassUrlPatterns = value;
        }

        /// <summary>
        /// Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
        /// </summary>
        [Input("correlate")]
        public Input<Inputs.RateLimitCorrelateArgs>? Correlate { get; set; }

        /// <summary>
        /// A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this ratelimit is currently disabled. Default: `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone. See definition below.
        /// </summary>
        [Input("match")]
        public Input<Inputs.RateLimitMatchArgs>? Match { get; set; }

        /// <summary>
        /// The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed (min: 1, max: 86,400).
        /// </summary>
        [Input("period", required: true)]
        public Input<int> Period { get; set; } = null!;

        /// <summary>
        /// The threshold that triggers the rate limit mitigations, combine with period. i.e. threshold per period (min: 2, max: 1,000,000).
        /// </summary>
        [Input("threshold", required: true)]
        public Input<int> Threshold { get; set; } = null!;

        /// <summary>
        /// The DNS zone ID to apply rate limiting to.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public RateLimitArgs()
        {
        }
    }

    public sealed class RateLimitState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to be performed when the threshold of matched traffic within the period defined is exceeded.
        /// </summary>
        [Input("action")]
        public Input<Inputs.RateLimitActionGetArgs>? Action { get; set; }

        [Input("bypassUrlPatterns")]
        private InputList<string>? _bypassUrlPatterns;

        /// <summary>
        /// URLs matching the patterns specified here will be excluded from rate limiting.
        /// </summary>
        public InputList<string> BypassUrlPatterns
        {
            get => _bypassUrlPatterns ?? (_bypassUrlPatterns = new InputList<string>());
            set => _bypassUrlPatterns = value;
        }

        /// <summary>
        /// Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
        /// </summary>
        [Input("correlate")]
        public Input<Inputs.RateLimitCorrelateGetArgs>? Correlate { get; set; }

        /// <summary>
        /// A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this ratelimit is currently disabled. Default: `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone. See definition below.
        /// </summary>
        [Input("match")]
        public Input<Inputs.RateLimitMatchGetArgs>? Match { get; set; }

        /// <summary>
        /// The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed (min: 1, max: 86,400).
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The threshold that triggers the rate limit mitigations, combine with period. i.e. threshold per period (min: 2, max: 1,000,000).
        /// </summary>
        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        /// <summary>
        /// The DNS zone ID to apply rate limiting to.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public RateLimitState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RateLimitActionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of action to perform. Allowable values are 'simulate', 'ban', 'challenge' and 'js_challenge'.
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        /// </summary>
        [Input("response")]
        public Input<RateLimitActionResponseArgs>? Response { get; set; }

        /// <summary>
        /// The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period (min: 1, max: 86400).
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public RateLimitActionArgs()
        {
        }
    }

    public sealed class RateLimitActionGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of action to perform. Allowable values are 'simulate', 'ban', 'challenge' and 'js_challenge'.
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        /// </summary>
        [Input("response")]
        public Input<RateLimitActionResponseGetArgs>? Response { get; set; }

        /// <summary>
        /// The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period (min: 1, max: 86400).
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public RateLimitActionGetArgs()
        {
        }
    }

    public sealed class RateLimitActionResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The body to return, the content here should conform to the content_type.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The content-type of the body, must be one of: 'text/plain', 'text/xml', 'application/json'.
        /// </summary>
        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        public RateLimitActionResponseArgs()
        {
        }
    }

    public sealed class RateLimitActionResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The body to return, the content here should conform to the content_type.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The content-type of the body, must be one of: 'text/plain', 'text/xml', 'application/json'.
        /// </summary>
        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        public RateLimitActionResponseGetArgs()
        {
        }
    }

    public sealed class RateLimitCorrelateArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to 'nat', NAT support will be enabled for rate limiting.
        /// </summary>
        [Input("by")]
        public Input<string>? By { get; set; }

        public RateLimitCorrelateArgs()
        {
        }
    }

    public sealed class RateLimitCorrelateGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to 'nat', NAT support will be enabled for rate limiting.
        /// </summary>
        [Input("by")]
        public Input<string>? By { get; set; }

        public RateLimitCorrelateGetArgs()
        {
        }
    }

    public sealed class RateLimitMatchArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Matches HTTP requests (from the client to Cloudflare). See definition below.
        /// </summary>
        [Input("request")]
        public Input<RateLimitMatchRequestArgs>? Request { get; set; }

        /// <summary>
        /// Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        /// </summary>
        [Input("response")]
        public Input<RateLimitMatchResponseArgs>? Response { get; set; }

        public RateLimitMatchArgs()
        {
        }
    }

    public sealed class RateLimitMatchGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Matches HTTP requests (from the client to Cloudflare). See definition below.
        /// </summary>
        [Input("request")]
        public Input<RateLimitMatchRequestGetArgs>? Request { get; set; }

        /// <summary>
        /// Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        /// </summary>
        [Input("response")]
        public Input<RateLimitMatchResponseGetArgs>? Response { get; set; }

        public RateLimitMatchGetArgs()
        {
        }
    }

    public sealed class RateLimitMatchRequestArgs : Pulumi.ResourceArgs
    {
        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// HTTP Methods, can be a subset ['POST','PUT'] or all ['\_ALL\_']. Default: ['\_ALL\_'].
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        [Input("schemes")]
        private InputList<string>? _schemes;

        /// <summary>
        /// HTTP Schemes, can be one ['HTTPS'], both ['HTTP','HTTPS'] or all ['\_ALL\_'].  Default: ['\_ALL\_'].
        /// </summary>
        public InputList<string> Schemes
        {
            get => _schemes ?? (_schemes = new InputList<string>());
            set => _schemes = value;
        }

        /// <summary>
        /// The URL pattern to match comprised of the host and path, i.e. example.org/path. Wildcard are expanded to match applicable traffic, query strings are not matched. Use * for all traffic to your zone. Default: '*'.
        /// </summary>
        [Input("urlPattern")]
        public Input<string>? UrlPattern { get; set; }

        public RateLimitMatchRequestArgs()
        {
        }
    }

    public sealed class RateLimitMatchRequestGetArgs : Pulumi.ResourceArgs
    {
        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// HTTP Methods, can be a subset ['POST','PUT'] or all ['\_ALL\_']. Default: ['\_ALL\_'].
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        [Input("schemes")]
        private InputList<string>? _schemes;

        /// <summary>
        /// HTTP Schemes, can be one ['HTTPS'], both ['HTTP','HTTPS'] or all ['\_ALL\_'].  Default: ['\_ALL\_'].
        /// </summary>
        public InputList<string> Schemes
        {
            get => _schemes ?? (_schemes = new InputList<string>());
            set => _schemes = value;
        }

        /// <summary>
        /// The URL pattern to match comprised of the host and path, i.e. example.org/path. Wildcard are expanded to match applicable traffic, query strings are not matched. Use * for all traffic to your zone. Default: '*'.
        /// </summary>
        [Input("urlPattern")]
        public Input<string>? UrlPattern { get; set; }

        public RateLimitMatchRequestGetArgs()
        {
        }
    }

    public sealed class RateLimitMatchResponseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only count traffic that has come from your origin servers. If true, cached items that Cloudflare serve will not count towards rate limiting. Default: `true`.
        /// </summary>
        [Input("originTraffic")]
        public Input<bool>? OriginTraffic { get; set; }

        [Input("statuses")]
        private InputList<int>? _statuses;

        /// <summary>
        /// HTTP Status codes, can be one [403], many [401,403] or indicate all by not providing this value.
        /// </summary>
        public InputList<int> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<int>());
            set => _statuses = value;
        }

        public RateLimitMatchResponseArgs()
        {
        }
    }

    public sealed class RateLimitMatchResponseGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only count traffic that has come from your origin servers. If true, cached items that Cloudflare serve will not count towards rate limiting. Default: `true`.
        /// </summary>
        [Input("originTraffic")]
        public Input<bool>? OriginTraffic { get; set; }

        [Input("statuses")]
        private InputList<int>? _statuses;

        /// <summary>
        /// HTTP Status codes, can be one [403], many [401,403] or indicate all by not providing this value.
        /// </summary>
        public InputList<int> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<int>());
            set => _statuses = value;
        }

        public RateLimitMatchResponseGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RateLimitAction
    {
        /// <summary>
        /// The type of action to perform. Allowable values are 'simulate', 'ban', 'challenge' and 'js_challenge'.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        /// </summary>
        public readonly RateLimitActionResponse? Response;
        /// <summary>
        /// The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period (min: 1, max: 86400).
        /// </summary>
        public readonly int? Timeout;

        [OutputConstructor]
        private RateLimitAction(
            string mode,
            RateLimitActionResponse? response,
            int? timeout)
        {
            Mode = mode;
            Response = response;
            Timeout = timeout;
        }
    }

    [OutputType]
    public sealed class RateLimitActionResponse
    {
        /// <summary>
        /// The body to return, the content here should conform to the content_type.
        /// </summary>
        public readonly string Body;
        /// <summary>
        /// The content-type of the body, must be one of: 'text/plain', 'text/xml', 'application/json'.
        /// </summary>
        public readonly string ContentType;

        [OutputConstructor]
        private RateLimitActionResponse(
            string body,
            string contentType)
        {
            Body = body;
            ContentType = contentType;
        }
    }

    [OutputType]
    public sealed class RateLimitCorrelate
    {
        /// <summary>
        /// If set to 'nat', NAT support will be enabled for rate limiting.
        /// </summary>
        public readonly string? By;

        [OutputConstructor]
        private RateLimitCorrelate(string? by)
        {
            By = by;
        }
    }

    [OutputType]
    public sealed class RateLimitMatch
    {
        /// <summary>
        /// Matches HTTP requests (from the client to Cloudflare). See definition below.
        /// </summary>
        public readonly RateLimitMatchRequest Request;
        /// <summary>
        /// Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        /// </summary>
        public readonly RateLimitMatchResponse Response;

        [OutputConstructor]
        private RateLimitMatch(
            RateLimitMatchRequest request,
            RateLimitMatchResponse response)
        {
            Request = request;
            Response = response;
        }
    }

    [OutputType]
    public sealed class RateLimitMatchRequest
    {
        /// <summary>
        /// HTTP Methods, can be a subset ['POST','PUT'] or all ['\_ALL\_']. Default: ['\_ALL\_'].
        /// </summary>
        public readonly ImmutableArray<string> Methods;
        /// <summary>
        /// HTTP Schemes, can be one ['HTTPS'], both ['HTTP','HTTPS'] or all ['\_ALL\_'].  Default: ['\_ALL\_'].
        /// </summary>
        public readonly ImmutableArray<string> Schemes;
        /// <summary>
        /// The URL pattern to match comprised of the host and path, i.e. example.org/path. Wildcard are expanded to match applicable traffic, query strings are not matched. Use * for all traffic to your zone. Default: '*'.
        /// </summary>
        public readonly string UrlPattern;

        [OutputConstructor]
        private RateLimitMatchRequest(
            ImmutableArray<string> methods,
            ImmutableArray<string> schemes,
            string urlPattern)
        {
            Methods = methods;
            Schemes = schemes;
            UrlPattern = urlPattern;
        }
    }

    [OutputType]
    public sealed class RateLimitMatchResponse
    {
        /// <summary>
        /// Only count traffic that has come from your origin servers. If true, cached items that Cloudflare serve will not count towards rate limiting. Default: `true`.
        /// </summary>
        public readonly bool OriginTraffic;
        /// <summary>
        /// HTTP Status codes, can be one [403], many [401,403] or indicate all by not providing this value.
        /// </summary>
        public readonly ImmutableArray<int> Statuses;

        [OutputConstructor]
        private RateLimitMatchResponse(
            bool originTraffic,
            ImmutableArray<int> statuses)
        {
            OriginTraffic = originTraffic;
            Statuses = statuses;
        }
    }
    }
}
