// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class RulesetRuleActionParametersOverrideRule {
    /**
     * @return Action to perform in the ruleset rule. Available values: `allow`, `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `set_config`, `serve_error`, `skip`.
     * 
     */
    private String action;
    /**
     * @return Whether the rule is active.
     * 
     */
    private Boolean enabled;
    /**
     * @return Unique rule identifier.
     * 
     */
    private String id;
    private Integer scoreThreshold;
    private String sensitivityLevel;

    private RulesetRuleActionParametersOverrideRule() {}
    /**
     * @return Action to perform in the ruleset rule. Available values: `allow`, `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `set_config`, `serve_error`, `skip`.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Whether the rule is active.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Unique rule identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer scoreThreshold() {
        return this.scoreThreshold;
    }
    public String sensitivityLevel() {
        return this.sensitivityLevel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRuleActionParametersOverrideRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private Boolean enabled;
        private String id;
        private Integer scoreThreshold;
        private String sensitivityLevel;
        public Builder() {}
        public Builder(RulesetRuleActionParametersOverrideRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.scoreThreshold = defaults.scoreThreshold;
    	      this.sensitivityLevel = defaults.sensitivityLevel;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder scoreThreshold(Integer scoreThreshold) {
            this.scoreThreshold = Objects.requireNonNull(scoreThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder sensitivityLevel(String sensitivityLevel) {
            this.sensitivityLevel = Objects.requireNonNull(sensitivityLevel);
            return this;
        }
        public RulesetRuleActionParametersOverrideRule build() {
            final var o = new RulesetRuleActionParametersOverrideRule();
            o.action = action;
            o.enabled = enabled;
            o.id = id;
            o.scoreThreshold = scoreThreshold;
            o.sensitivityLevel = sensitivityLevel;
            return o;
        }
    }
}
