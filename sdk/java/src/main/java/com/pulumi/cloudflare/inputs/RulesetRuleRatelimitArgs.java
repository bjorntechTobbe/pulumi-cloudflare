// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RulesetRuleRatelimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleRatelimitArgs Empty = new RulesetRuleRatelimitArgs();

    @Import(name="characteristics", required=true)
    private Output<List<String>> characteristics;

    public Output<List<String>> characteristics() {
        return this.characteristics;
    }

    @Import(name="countingExpression", required=true)
    private Output<String> countingExpression;

    public Output<String> countingExpression() {
        return this.countingExpression;
    }

    @Import(name="mitigationTimeout", required=true)
    private Output<Integer> mitigationTimeout;

    public Output<Integer> mitigationTimeout() {
        return this.mitigationTimeout;
    }

    @Import(name="period", required=true)
    private Output<Integer> period;

    public Output<Integer> period() {
        return this.period;
    }

    @Import(name="requestsPerPeriod", required=true)
    private Output<Integer> requestsPerPeriod;

    public Output<Integer> requestsPerPeriod() {
        return this.requestsPerPeriod;
    }

    @Import(name="requestsToOrigin", required=true)
    private Output<Boolean> requestsToOrigin;

    public Output<Boolean> requestsToOrigin() {
        return this.requestsToOrigin;
    }

    @Import(name="scorePerPeriod", required=true)
    private Output<Integer> scorePerPeriod;

    public Output<Integer> scorePerPeriod() {
        return this.scorePerPeriod;
    }

    @Import(name="scoreResponseHeaderName", required=true)
    private Output<String> scoreResponseHeaderName;

    public Output<String> scoreResponseHeaderName() {
        return this.scoreResponseHeaderName;
    }

    private RulesetRuleRatelimitArgs() {}

    private RulesetRuleRatelimitArgs(RulesetRuleRatelimitArgs $) {
        this.characteristics = $.characteristics;
        this.countingExpression = $.countingExpression;
        this.mitigationTimeout = $.mitigationTimeout;
        this.period = $.period;
        this.requestsPerPeriod = $.requestsPerPeriod;
        this.requestsToOrigin = $.requestsToOrigin;
        this.scorePerPeriod = $.scorePerPeriod;
        this.scoreResponseHeaderName = $.scoreResponseHeaderName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleRatelimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleRatelimitArgs $;

        public Builder() {
            $ = new RulesetRuleRatelimitArgs();
        }

        public Builder(RulesetRuleRatelimitArgs defaults) {
            $ = new RulesetRuleRatelimitArgs(Objects.requireNonNull(defaults));
        }

        public Builder characteristics(Output<List<String>> characteristics) {
            $.characteristics = characteristics;
            return this;
        }

        public Builder characteristics(List<String> characteristics) {
            return characteristics(Output.of(characteristics));
        }

        public Builder characteristics(String... characteristics) {
            return characteristics(List.of(characteristics));
        }

        public Builder countingExpression(Output<String> countingExpression) {
            $.countingExpression = countingExpression;
            return this;
        }

        public Builder countingExpression(String countingExpression) {
            return countingExpression(Output.of(countingExpression));
        }

        public Builder mitigationTimeout(Output<Integer> mitigationTimeout) {
            $.mitigationTimeout = mitigationTimeout;
            return this;
        }

        public Builder mitigationTimeout(Integer mitigationTimeout) {
            return mitigationTimeout(Output.of(mitigationTimeout));
        }

        public Builder period(Output<Integer> period) {
            $.period = period;
            return this;
        }

        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        public Builder requestsPerPeriod(Output<Integer> requestsPerPeriod) {
            $.requestsPerPeriod = requestsPerPeriod;
            return this;
        }

        public Builder requestsPerPeriod(Integer requestsPerPeriod) {
            return requestsPerPeriod(Output.of(requestsPerPeriod));
        }

        public Builder requestsToOrigin(Output<Boolean> requestsToOrigin) {
            $.requestsToOrigin = requestsToOrigin;
            return this;
        }

        public Builder requestsToOrigin(Boolean requestsToOrigin) {
            return requestsToOrigin(Output.of(requestsToOrigin));
        }

        public Builder scorePerPeriod(Output<Integer> scorePerPeriod) {
            $.scorePerPeriod = scorePerPeriod;
            return this;
        }

        public Builder scorePerPeriod(Integer scorePerPeriod) {
            return scorePerPeriod(Output.of(scorePerPeriod));
        }

        public Builder scoreResponseHeaderName(Output<String> scoreResponseHeaderName) {
            $.scoreResponseHeaderName = scoreResponseHeaderName;
            return this;
        }

        public Builder scoreResponseHeaderName(String scoreResponseHeaderName) {
            return scoreResponseHeaderName(Output.of(scoreResponseHeaderName));
        }

        public RulesetRuleRatelimitArgs build() {
            $.characteristics = Objects.requireNonNull($.characteristics, "expected parameter 'characteristics' to be non-null");
            $.countingExpression = Objects.requireNonNull($.countingExpression, "expected parameter 'countingExpression' to be non-null");
            $.mitigationTimeout = Objects.requireNonNull($.mitigationTimeout, "expected parameter 'mitigationTimeout' to be non-null");
            $.period = Objects.requireNonNull($.period, "expected parameter 'period' to be non-null");
            $.requestsPerPeriod = Objects.requireNonNull($.requestsPerPeriod, "expected parameter 'requestsPerPeriod' to be non-null");
            $.requestsToOrigin = Objects.requireNonNull($.requestsToOrigin, "expected parameter 'requestsToOrigin' to be non-null");
            $.scorePerPeriod = Objects.requireNonNull($.scorePerPeriod, "expected parameter 'scorePerPeriod' to be non-null");
            $.scoreResponseHeaderName = Objects.requireNonNull($.scoreResponseHeaderName, "expected parameter 'scoreResponseHeaderName' to be non-null");
            return $;
        }
    }

}
