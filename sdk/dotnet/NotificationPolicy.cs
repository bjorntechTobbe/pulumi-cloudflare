// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource, that manages a notification policy for Cloudflare's products. The delivery
    /// mechanisms supported are email, webhooks, and PagerDuty.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Cloudflare.NotificationPolicy("example", new Cloudflare.NotificationPolicyArgs
    ///         {
    ///             AccountId = "c4a7362d577a6c3019a474fd6f485821",
    ///             AlertType = "universal_ssl_event_type",
    ///             Description = "Notification policy to alert when my SSL certificates are modified",
    ///             EmailIntegrations = 
    ///             {
    ///                 new Cloudflare.Inputs.NotificationPolicyEmailIntegrationArgs
    ///                 {
    ///                     Id = "myemail@example.com",
    ///                 },
    ///             },
    ///             Enabled = true,
    ///             Name = "Policy for SSL notification events",
    ///             PagerdutyIntegrations = 
    ///             {
    ///                 new Cloudflare.Inputs.NotificationPolicyPagerdutyIntegrationArgs
    ///                 {
    ///                     Id = "850129d136459401860572c5d964d27k",
    ///                 },
    ///             },
    ///             WebhooksIntegrations = 
    ///             {
    ///                 new Cloudflare.Inputs.NotificationPolicyWebhooksIntegrationArgs
    ///                 {
    ///                     Id = "1860572c5d964d27aa0f379d13645940",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing notification policy can be imported using the account ID and the policy ID
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example 72c379d136459405d964d27aa0f18605/c4a7362d577a6c3019a474fd6f485821
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/notificationPolicy:NotificationPolicy")]
    public partial class NotificationPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the account for which the notification policy has to be created.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The event type that will trigger the dispatch of a notification.
        /// </summary>
        [Output("alertType")]
        public Output<string> AlertType { get; private set; } = null!;

        [Output("conditions")]
        public Output<ImmutableDictionary<string, object>?> Conditions { get; private set; } = null!;

        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Description of the notification policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        [Output("emailIntegrations")]
        public Output<ImmutableArray<Outputs.NotificationPolicyEmailIntegration>> EmailIntegrations { get; private set; } = null!;

        /// <summary>
        /// The status of the notification policy, a boolean value.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Optional filterable items for a policy.
        /// </summary>
        [Output("filters")]
        public Output<ImmutableDictionary<string, ImmutableArray<object>>?> Filters { get; private set; } = null!;

        [Output("modified")]
        public Output<string> Modified { get; private set; } = null!;

        /// <summary>
        /// The name of the notification policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        [Output("pagerdutyIntegrations")]
        public Output<ImmutableArray<Outputs.NotificationPolicyPagerdutyIntegration>> PagerdutyIntegrations { get; private set; } = null!;

        /// <summary>
        /// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        [Output("webhooksIntegrations")]
        public Output<ImmutableArray<Outputs.NotificationPolicyWebhooksIntegration>> WebhooksIntegrations { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationPolicy(string name, NotificationPolicyArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/notificationPolicy:NotificationPolicy", name, args ?? new NotificationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationPolicy(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/notificationPolicy:NotificationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationPolicy Get(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationPolicy(name, id, state, options);
        }
    }

    public sealed class NotificationPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account for which the notification policy has to be created.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The event type that will trigger the dispatch of a notification.
        /// </summary>
        [Input("alertType", required: true)]
        public Input<string> AlertType { get; set; } = null!;

        [Input("conditions")]
        private InputMap<object>? _conditions;
        public InputMap<object> Conditions
        {
            get => _conditions ?? (_conditions = new InputMap<object>());
            set => _conditions = value;
        }

        /// <summary>
        /// Description of the notification policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("emailIntegrations")]
        private InputList<Inputs.NotificationPolicyEmailIntegrationArgs>? _emailIntegrations;

        /// <summary>
        /// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        public InputList<Inputs.NotificationPolicyEmailIntegrationArgs> EmailIntegrations
        {
            get => _emailIntegrations ?? (_emailIntegrations = new InputList<Inputs.NotificationPolicyEmailIntegrationArgs>());
            set => _emailIntegrations = value;
        }

        /// <summary>
        /// The status of the notification policy, a boolean value.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("filters")]
        private InputMap<ImmutableArray<object>>? _filters;

        /// <summary>
        /// Optional filterable items for a policy.
        /// </summary>
        public InputMap<ImmutableArray<object>> Filters
        {
            get => _filters ?? (_filters = new InputMap<ImmutableArray<object>>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of the notification policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("pagerdutyIntegrations")]
        private InputList<Inputs.NotificationPolicyPagerdutyIntegrationArgs>? _pagerdutyIntegrations;

        /// <summary>
        /// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        public InputList<Inputs.NotificationPolicyPagerdutyIntegrationArgs> PagerdutyIntegrations
        {
            get => _pagerdutyIntegrations ?? (_pagerdutyIntegrations = new InputList<Inputs.NotificationPolicyPagerdutyIntegrationArgs>());
            set => _pagerdutyIntegrations = value;
        }

        [Input("webhooksIntegrations")]
        private InputList<Inputs.NotificationPolicyWebhooksIntegrationArgs>? _webhooksIntegrations;

        /// <summary>
        /// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        public InputList<Inputs.NotificationPolicyWebhooksIntegrationArgs> WebhooksIntegrations
        {
            get => _webhooksIntegrations ?? (_webhooksIntegrations = new InputList<Inputs.NotificationPolicyWebhooksIntegrationArgs>());
            set => _webhooksIntegrations = value;
        }

        public NotificationPolicyArgs()
        {
        }
    }

    public sealed class NotificationPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account for which the notification policy has to be created.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The event type that will trigger the dispatch of a notification.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        [Input("conditions")]
        private InputMap<object>? _conditions;
        public InputMap<object> Conditions
        {
            get => _conditions ?? (_conditions = new InputMap<object>());
            set => _conditions = value;
        }

        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Description of the notification policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("emailIntegrations")]
        private InputList<Inputs.NotificationPolicyEmailIntegrationGetArgs>? _emailIntegrations;

        /// <summary>
        /// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        public InputList<Inputs.NotificationPolicyEmailIntegrationGetArgs> EmailIntegrations
        {
            get => _emailIntegrations ?? (_emailIntegrations = new InputList<Inputs.NotificationPolicyEmailIntegrationGetArgs>());
            set => _emailIntegrations = value;
        }

        /// <summary>
        /// The status of the notification policy, a boolean value.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filters")]
        private InputMap<ImmutableArray<object>>? _filters;

        /// <summary>
        /// Optional filterable items for a policy.
        /// </summary>
        public InputMap<ImmutableArray<object>> Filters
        {
            get => _filters ?? (_filters = new InputMap<ImmutableArray<object>>());
            set => _filters = value;
        }

        [Input("modified")]
        public Input<string>? Modified { get; set; }

        /// <summary>
        /// The name of the notification policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pagerdutyIntegrations")]
        private InputList<Inputs.NotificationPolicyPagerdutyIntegrationGetArgs>? _pagerdutyIntegrations;

        /// <summary>
        /// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        public InputList<Inputs.NotificationPolicyPagerdutyIntegrationGetArgs> PagerdutyIntegrations
        {
            get => _pagerdutyIntegrations ?? (_pagerdutyIntegrations = new InputList<Inputs.NotificationPolicyPagerdutyIntegrationGetArgs>());
            set => _pagerdutyIntegrations = value;
        }

        [Input("webhooksIntegrations")]
        private InputList<Inputs.NotificationPolicyWebhooksIntegrationGetArgs>? _webhooksIntegrations;

        /// <summary>
        /// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
        /// </summary>
        public InputList<Inputs.NotificationPolicyWebhooksIntegrationGetArgs> WebhooksIntegrations
        {
            get => _webhooksIntegrations ?? (_webhooksIntegrations = new InputList<Inputs.NotificationPolicyWebhooksIntegrationGetArgs>());
            set => _webhooksIntegrations = value;
        }

        public NotificationPolicyState()
        {
        }
    }
}
