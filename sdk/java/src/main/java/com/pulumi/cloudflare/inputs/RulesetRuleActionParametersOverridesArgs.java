// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersOverridesCategoryArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersOverridesRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RulesetRuleActionParametersOverridesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleActionParametersOverridesArgs Empty = new RulesetRuleActionParametersOverridesArgs();

    @Import(name="action", required=true)
    private Output<String> action;

    public Output<String> action() {
        return this.action;
    }

    @Import(name="categories", required=true)
    private Output<List<RulesetRuleActionParametersOverridesCategoryArgs>> categories;

    public Output<List<RulesetRuleActionParametersOverridesCategoryArgs>> categories() {
        return this.categories;
    }

    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * List of rules to apply to the ruleset.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<RulesetRuleActionParametersOverridesRuleArgs>> rules;

    /**
     * @return List of rules to apply to the ruleset.
     * 
     */
    public Output<List<RulesetRuleActionParametersOverridesRuleArgs>> rules() {
        return this.rules;
    }

    @Import(name="sensitivityLevel", required=true)
    private Output<String> sensitivityLevel;

    public Output<String> sensitivityLevel() {
        return this.sensitivityLevel;
    }

    private RulesetRuleActionParametersOverridesArgs() {}

    private RulesetRuleActionParametersOverridesArgs(RulesetRuleActionParametersOverridesArgs $) {
        this.action = $.action;
        this.categories = $.categories;
        this.enabled = $.enabled;
        this.rules = $.rules;
        this.sensitivityLevel = $.sensitivityLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleActionParametersOverridesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleActionParametersOverridesArgs $;

        public Builder() {
            $ = new RulesetRuleActionParametersOverridesArgs();
        }

        public Builder(RulesetRuleActionParametersOverridesArgs defaults) {
            $ = new RulesetRuleActionParametersOverridesArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder categories(Output<List<RulesetRuleActionParametersOverridesCategoryArgs>> categories) {
            $.categories = categories;
            return this;
        }

        public Builder categories(List<RulesetRuleActionParametersOverridesCategoryArgs> categories) {
            return categories(Output.of(categories));
        }

        public Builder categories(RulesetRuleActionParametersOverridesCategoryArgs... categories) {
            return categories(List.of(categories));
        }

        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param rules List of rules to apply to the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<RulesetRuleActionParametersOverridesRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules List of rules to apply to the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<RulesetRuleActionParametersOverridesRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules List of rules to apply to the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rules(RulesetRuleActionParametersOverridesRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public Builder sensitivityLevel(Output<String> sensitivityLevel) {
            $.sensitivityLevel = sensitivityLevel;
            return this;
        }

        public Builder sensitivityLevel(String sensitivityLevel) {
            return sensitivityLevel(Output.of(sensitivityLevel));
        }

        public RulesetRuleActionParametersOverridesArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.categories = Objects.requireNonNull($.categories, "expected parameter 'categories' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            $.sensitivityLevel = Objects.requireNonNull($.sensitivityLevel, "expected parameter 'sensitivityLevel' to be non-null");
            return $;
        }
    }

}
